<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--destroy-method="close"的作用是在bean销毁的时候执行BasicDataSource的destroy方法，
    与之先关的还有init-method是在容器初始化的时候调用的方法，
    另一种实现方式是实现InitializingBean和DisposableBean接口-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="defaultAutoCommit" value="${defaultAutoCommit}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}" />
        <property name="maxWaitMillis" value="${maxWaitMillis}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--JDBC的DataSource。这可以是任意的DataSource,必须的属性-->
        <property name="dataSource" ref="dataSource"/>
        <!--用来指定MyBatis的xml配置文件路径的-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--如果在mybatis-config.xml利用<mappers>进行xml映射文件的配置，就可以不用配置下面的mapperLocations属性了-->
        <!--
        <property name="mappperLocations" value="classpath:mybatis/*.xml"/>
        -->
    </bean>

    <!--它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean，
        basePackage 属性是让你为映射器接口文件设置基本的包路径,你可以使用分号或逗号
        作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。
        注 意 , 没有必要去指定SqlSessionFactory 或 SqlSessionTemplate , 因为 MapperScannerConfigurer 将会创建MapperFactoryBean，
        之后自动装配。但是,如果你使 用了一个 以上的 DataSource，那 么自动装配可能会失效 。这种情况下 ，
        你可以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 bean 名称来使用。
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" lazy-init="true">
        <property name="basePackage" value="com.xlw.levyx.mapper.client"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- 声明式事务管理 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务增强 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- 事务属性定义 -->
        <tx:attributes>
            <!--
                all methods starting with 'get' and 'find' are read-only
                其中*为通配符，即代表以get为开头的所有方法，即表示符合此命名规则的方法作为一个事务
                propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择
                tx:method的属性：
                    timeout：事务超时的时间（以秒为单位）
                    name：与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。如：'get*'、'handle*'、'on*Event'等等。
                    propagation：事务传播行为
                    isolation：
                    read-only：事务是否只读
                    rollback-for：将被触发进行回滚的 Exception(s)；以逗号分开。如：'com.foo.MyBusinessException,ServletException'
                    no-rollback-for：不被触发进行回滚的Exception(s)；以逗号分开。
            -->
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="continue*" propagation="REQUIRED" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <!-- 使用tx/aop来配置 -->
    <aop:config>
        <!--
            通过aop定义事务增强切面
            expression 其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。
        -->
        <aop:pointcut id="serviceOperation" expression="execution(* com.xlw.levyx.api.service.*Service.*(..))"/>
        <!--
            引用事务增强
            aop:advisor标签就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理
        -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>

</beans>