<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--定义属性文件位置，classpath* 和 classpath的区别：
        classpath* : 加载所有jar包中的文件
        classpath ：只加载一个文件，加载的文件取决于jar包的加载顺序
    -->
    <context:property-placeholder location="classpath*:application.properties"/>

    <!--配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，
    如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean-->
    <context:component-scan base-package="com.xlw.levyx.api"/>
    <!--<context:component-scan base-package="com.xlw.levyx.mapper.client"/>-->

    <!--配置<mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个
    org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
    它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
    就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理-->
    <mvc:default-servlet-handler/>

    <!--<mvc:annotation-scan/>是告知Spring，我们启用注解驱动。
    然后Spring会自动为我们注册RequestMappingHandlerMapping、BeanNameUrlHandlerMapping、
    RequestMappingHandlerAdapter、HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter、
    ExceptionHandlerExceptionResolver、ResponseStatusExceptionResolver、DefaultHandlerExceptionResolver
    这几个Bean到工厂中，来处理我们的请求
    详情见：https://my.oschina.net/HeliosFly/blog/205343-->
    <mvc:annotation-driven/>

    <!--配置编码过滤器，设置编码格式-->
    <bean id="encodingFilter" class="org.springframework.web.filter.CharacterEncodingFilter">
        <property name="encoding" value="utf-8" />
        <property name="forceEncoding" value="true" />
    </bean>

    <!--TODO 解释下面两个标签含义-->
    <!--
        网上找了好多例子，还是没有太弄懂这个标签的含义
        我的理解是，配置了这个标签，就可以使用注解方式进行AOP切面编程了
        Spring默认不支持@AspectJ风格的切面声明，为了支持需要使用如下的标签配置
        这样Spring就能发现@AspectJ风格的切面并且将切面应用到目标对象。
    -->
    <aop:aspectj-autoproxy>
        <aop:include name="timingAspect" />
    </aop:aspectj-autoproxy>

    <!--
        这个是perf4j实现日志监控的切面类，在使用监控时需要在方法上加上@Profile注解
    -->
    <bean id="timingAspect" class="org.perf4j.slf4j.aop.TimingAspect" />

    <mvc:interceptors>
        <!-- 定义全局拦截器，bean的顺序决定执行顺序 -->
        <bean class="com.xlw.levyx.api.interceptor.GlobalInterceptor"/>

        <mvc:interceptor>
            <!--
                拦截器过滤的路径，设置之后该拦截器只会拦截设置路径的请求
                /student/** 这种配置会过滤掉 localhost:port/projectName/student/.../....这种类型的请求
                /**/student/** 这种配置会过滤掉路径所有带有student的请求
             -->
            <mvc:mapping path="/student/**"/>
            <bean class="com.xlw.levyx.api.interceptor.StudentInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/user/**"/>
            <bean class="com.xlw.levyx.api.interceptor.UserInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 视图解析器 -->
    <!--
        在spring 中，常用的ViewResolver 有如下几种：
            InternalResourceViewResolver	将逻辑视图名字解析为一个路径
            BeanNameViewResolver	将逻辑视图名字解析为bean的Name属性，从而根据name属性，找定义View的bean
            ResourceBundleResolver	和BeanNameViewResolver一样，只不过定义的view-bean都在一个properties文件中，用这个类进行加载这个properties文件
            XmlViewResolver	和ResourceBundleResolver一样，只不过定义的view-bean在一个xml文件中，用这个类来加载xml文件
        一篇针对viewResolver的文章：https://my.oschina.net/HeliosFly/blog/221392
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- hessian -->
    <bean id="articleClient" class="com.xlw.levyx.api.client.ArticleClient">
        <property name="url" value="${hessian.service.url}" />
    </bean>

    <!--导入其他配置文件-->
    <import resource="spring/applicationContext-component.xml"/>
    <import resource="spring/applicationContext-redis.xml"/>
    <import resource="spring/applicationContext-mongo.xml"/>

</beans>